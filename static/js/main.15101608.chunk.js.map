{"version":3,"sources":["pages/player.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatBox","chats","sendMessage","name","useState","message","setMessage","id","className","style","maxHeight","map","chat","sender","wordBreak","time","Form","onSubmit","e","preventDefault","Control","value","onChange","target","placeholder","Button","type","Player","currSong","setCurrSong","isPlaying","setIsPlaying","loaded","setLoaded","currentState","setCurrentState","interacted","setInteracted","playerRef","useRef","setName","isNameModalOpen","setIsNameModalOpen","isChatModalOpen","setIsChatModalOpen","socket","setSocket","setChats","handleChatClick","useEffect","boxRef","document","getElementById","scrollTop","scrollHeight","emit","on","setInterval","currentlyPlaying","state","nextPlaying","currSongArg","currentSong","seek","Date","getTime","start","Math","abs","current","sync","song","io","onClick","play","Modal","show","centered","onHide","Header","Body","Group","v4","toLocaleString","src","url","ref","playing","onLoad","onPlay","onEnd","role","length","slice","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yPAWA,SAASA,EAAT,GAAuH,IAArGC,EAAoG,EAApGA,MAAOC,EAA6F,EAA7FA,YAAaC,EAAgF,EAAhFA,KAClC,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OAAO,gCACH,qBAAKC,GAAG,UAAUC,UAAU,yBAAyBC,MAAO,CAACC,UAAW,QAAxE,SACKT,EAAMU,KAAI,SAAAC,GAAI,OAAI,sBAAKJ,UAAW,SAAWI,EAAKC,SAAWV,EAAO,WAAa,cAA/D,UAEf,qBAAKM,MAAO,CAACK,UAAW,aAAxB,SAAuCF,EAAKP,UAC5C,wBAAOG,UAAU,WAAjB,UAA6BI,EAAKC,OAAlC,MAA6CD,EAAKG,QAClD,yBAHyBH,EAAKL,SAOtC,eAACS,EAAA,EAAD,CAAMC,SAAU,SAACC,GACbA,EAAEC,iBACFb,EAAW,IACXJ,EAAYG,IACbG,UAAU,SAJb,UAKI,cAACQ,EAAA,EAAKI,QAAN,CAAcZ,UAAU,OAAOa,MAAOhB,EAASiB,SAAU,SAAAJ,GAAC,OAAIZ,EAAWY,EAAEK,OAAOF,QACpEG,YAAY,oBAC1B,cAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,wBAOG,SAASC,IACpB,MAAgCvB,qBAAhC,mBAAOwB,EAAP,KAAiBC,EAAjB,KACA,EAAkCzB,oBAAS,GAA3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KACA,EAA4B3B,oBAAS,GAArC,mBAAO4B,EAAP,KAAeC,EAAf,KACA,EAAwC7B,mBAA0B,KAAlE,mBAAO8B,EAAP,KAAqBC,EAArB,KACA,EAAoC/B,oBAAS,GAA7C,mBAAOgC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,iBAAO,MAC9B,EAAwBnC,mBAAiB,IAAzC,mBAAOD,EAAP,KAAaqC,EAAb,KACA,EAA8CpC,oBAAS,GAAvD,mBAAOqC,EAAP,KAAwBC,EAAxB,KACA,EAA8CtC,oBAAS,GAAvD,mBAAOuC,EAAP,KAAwBC,EAAxB,KACA,EAA4BxC,qBAA5B,mBAAOyC,EAAP,KAAeC,EAAf,KACA,EAA0B1C,mBAAiB,IAA3C,mBAAOH,EAAP,KAAc8C,EAAd,KAsFA,SAASC,IACQ,KAAT7C,GACAyC,GAAmB,GACnBF,GAAmB,KAEnBA,GAAmB,GACnBE,GAAmB,IAI3B,OA/FAK,qBAAU,WACN,IAAMC,EAASC,SAASC,eAAe,WACnCF,IACAA,EAAOG,UAAYH,EAAOI,gBAC/B,CAACrD,IACJgD,qBAAU,WACFJ,GACAA,EAAOU,KAAK,cAEjB,CAACV,IACJI,qBAAU,WACN,GAAKJ,EAiBLA,EAAOW,GAAG,WAAW,WACjBC,aAAY,WACRZ,EAAOU,KAAK,aAtEV,KAwENV,EAAOW,GAAG,eAAe,SAACE,EAA2CC,EAAwBC,GAC3E,MAAVD,GAAiBD,IACjB7B,EAAY6B,GAjBxB,SAAcG,GAAiC,IAAD,EACtCC,EAAclC,EAElB,GADIiC,IAAaC,EAAcD,GAC1BC,EAAL,CACA,IAEgB,EAFVC,IAAQ,IAAIC,MAAOC,UAAYH,EAAYI,OAAS,IAC3CC,KAAKC,IAAIL,GAAI,UAAGzB,EAAU+B,eAAb,aAAG,EAAmBN,SACrC,IACT,UAAAzB,EAAU+B,eAAV,SAAmBN,KAAKA,KAWpBO,CAAKZ,GACL3B,GAAa,IAEb6B,IACK9B,IAAqB,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAU2C,KAAKhE,MAAOqD,EAAYW,KAAKhE,IACrDsB,EAAY+B,IAGpBzB,EAAgBwB,MAEpBd,EAAOW,GAAG,WAAW,SAACvD,GAClB8C,EAAS9C,aAnCjB,CACI,IAAM4C,EAAS2B,aAAG,6BAClB1B,EAAUD,MAoCf,CAACjB,EAAUE,EAAWe,IA+CrB,sBACI4B,QAnBR,WACgC,IAAD,GAAtBrC,GAAcJ,IACf,UAAAM,EAAU+B,eAAV,SAAmBK,QAEvBrC,GAAc,IAgBV7B,UAAU,8DAFd,UAII,eAACmE,EAAA,EAAD,CAAOC,KAAMnC,EAAiBoC,UAAQ,EAACC,OAAQ,kBAAMpC,GAAmB,IAAxE,UACI,cAACiC,EAAA,EAAMI,OAAP,iCACA,eAACJ,EAAA,EAAMK,KAAP,WACI,cAAChE,EAAA,EAAKiE,MAAN,CAAYzE,UAAU,OAAtB,SACI,cAACQ,EAAA,EAAKI,QAAN,CAAcI,YAAY,OAAOH,MAAOlB,EAAMmB,SAAU,SAAAJ,GAAC,OAAIsB,EAAQtB,EAAEK,OAAOF,YAElF,cAACL,EAAA,EAAKiE,MAAN,CAAYzE,UAAU,OAAtB,SACI,cAACiB,EAAA,EAAD,CAAQgD,QAASzB,EAAiBtB,KAAK,SAAvC,0BAKZ,eAACiD,EAAA,EAAD,CAAOC,KAAMjC,EAAiBkC,UAAQ,EAACC,OAAQ,kBAAMlC,GAAmB,IAAxE,UACI,cAAC+B,EAAA,EAAMI,OAAP,uBACA,cAACJ,EAAA,EAAMK,KAAP,UACI,cAAChF,EAAD,CAASG,KAAMA,EAAMF,MAAOA,EAAOC,YAhEnD,SAAqBG,GACjB,GAAKwC,GAAW1C,EAAhB,CAEA,IAAMS,EAAa,CACfP,UACAQ,OAAQV,EACRI,GAAI2E,cACJnE,MAAM,IAAIiD,MAAOmB,kBAErBtC,EAAOU,KAAK,WAAY3C,YA0DnBgB,GACG,cAAC,IAAD,CACIwD,IAAKxD,EAAS2C,KAAKc,IACnBC,IAAKhD,EACLiD,QAASzD,EACT0D,OA3DhB,WACIvD,GAAU,IA2DEwD,OAnDhB,WACIpD,GAAc,GACdN,GAAa,IAkDD2D,MAzDhB,WACI3D,GAAa,GACbE,GAAU,MA0DN,sBAAKzB,UAAU,cAAf,UACI,qBAAKA,UAAU,KAAf,kCAGCsB,GAAaM,GACV,sBAAK5B,UAAU,GAAf,wCACyBoB,QADzB,IACyBA,OADzB,EACyBA,EAAU2C,KAAKpE,QAG3C6B,IAAWI,GACR,qBAAK5B,UAAU,GAAf,mDAIc,MAAjB0B,GAAwBE,GACzB,qBAAK5B,UAAU,GAAf,wCAIEwB,GACF,qBAAKxB,UAAU,gCAAgCmF,KAAK,WAEpD,uBACA,sBAAKnF,UAAU,oDAAf,UACKP,EAAM2F,OAAS,GAChB,gCAAM3F,EAAMA,EAAM2F,OAAS,GAAG/E,OAA9B,SAA2C,8BAAIZ,EAAMA,EAAM2F,OAAS,GAAGvF,QAAQwF,MAAM,EAAG,IAAK5F,EAAMA,EAAM2F,OAAS,GAAGvF,QAAQuF,OAAS,IAAM,YAE5I,qBAAKE,IAAI,OAAOtF,UAAU,WAAWiE,QAASzB,EACzCoC,IAAI,6EChMdW,MAVf,WACI,OACI,qBAAKvF,UAAU,OAAf,SACI,qBAAKA,UAAU,YAAf,SACI,cAACmB,EAAD,SCODqE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJxD,SAASC,eAAe,SAM5B4C,K","file":"static/js/main.15101608.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport ReactHowler from \"react-howler\";\nimport {io, Socket} from 'socket.io-client';\nimport CurrentlyPlaying from \"../interfaces/currentlyPlaying\";\nimport {DefaultEventsMap} from \"socket.io-client/build/typed-events\";\nimport {Button, Form, Modal} from \"react-bootstrap\";\nimport {Chat} from \"../interfaces/Chat\";\nimport {v4} from 'uuid';\n\nconst SYNC_RATE = 2000;\n\nfunction ChatBox({chats, sendMessage, name}: { chats: Chat[], sendMessage: (message: string) => void, name: string }) {\n    const [message, setMessage] = useState(\"\");\n    return <div>\n        <div id=\"chatBox\" className=\"overflow-auto my-3 p-2\" style={{maxHeight: \"60vh\"}}>\n            {chats.map(chat => <div className={\"my-3 \" + (chat.sender === name ? \"text-end\" : \"text-start\")}\n                                    key={chat.id}>\n                <div style={{wordBreak: \"break-all\"}}>{chat.message}</div>\n                <small className=\"fw-light\">{chat.sender} | {chat.time}</small>\n                <hr/>\n            </div>)}\n        </div>\n\n        <Form onSubmit={(e) => {\n            e.preventDefault();\n            setMessage(\"\");\n            sendMessage(message)\n        }} className=\"d-flex\">\n            <Form.Control className=\"me-2\" value={message} onChange={e => setMessage(e.target.value)}\n                          placeholder=\"Write a message\"/>\n            <Button type=\"submit\">Send</Button>\n        </Form>\n\n    </div>\n}\n\n\nexport default function Player() {\n    const [currSong, setCurrSong] = useState<CurrentlyPlaying>();\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n    const [currentState, setCurrentState] = useState<\"X\" | \"W\" | \"P\">(\"X\");\n    const [interacted, setInteracted] = useState(false);\n    const playerRef: any = useRef(null);\n    const [name, setName] = useState<string>(\"\");\n    const [isNameModalOpen, setIsNameModalOpen] = useState(false);\n    const [isChatModalOpen, setIsChatModalOpen] = useState(false);\n    const [socket, setSocket] = useState<Socket<DefaultEventsMap, DefaultEventsMap>>();\n    const [chats, setChats] = useState<Chat[]>([]);\n    useEffect(() => {\n        const boxRef = document.getElementById(\"chatBox\");\n        if (boxRef)\n            boxRef.scrollTop = boxRef.scrollHeight;\n    }, [chats])\n    useEffect(() => {\n        if (socket) {\n            socket.emit(\"getChats\");\n        }\n    }, [socket])\n    useEffect(() => {\n        if (!socket) {\n            const socket = io(\"http://34.131.157.38:3001\");\n            setSocket(socket);\n            return;\n        }\n\n        function sync(currSongArg?: CurrentlyPlaying) {\n            let currentSong = currSong;\n            if (currSongArg) currentSong = currSongArg;\n            if (!currentSong) return;\n            const seek = (new Date().getTime() - currentSong.start) / 1000;\n            const offset = Math.abs(seek - playerRef.current?.seek());\n            if (offset > 1) {\n                playerRef.current?.seek(seek);\n            }\n        }\n\n        socket.on(\"connect\", () => {\n            setInterval(() => {\n                socket.emit(\"askSong\")\n            }, SYNC_RATE)\n            socket.on(\"receiveSong\", (currentlyPlaying: CurrentlyPlaying | null, state: \"W\" | \"P\" | \"X\", nextPlaying: CurrentlyPlaying | null) => {\n                if (state === \"P\" && currentlyPlaying) {\n                    setCurrSong(currentlyPlaying);\n                    sync(currentlyPlaying)\n                    setIsPlaying(true);\n                }\n                if (nextPlaying) {\n                    if (!isPlaying && currSong?.song.id !== nextPlaying.song.id) {\n                        setCurrSong(nextPlaying);\n                    }\n                }\n                setCurrentState(state);\n            })\n            socket.on(\"newChat\", (chats: Chat[]) => {\n                setChats(chats);\n            })\n        })\n    }, [currSong, isPlaying, socket])\n\n    function sendMessage(message: string) {\n        if (!socket || !name) return;\n\n        const chat: Chat = {\n            message,\n            sender: name,\n            id: v4(),\n            time: new Date().toLocaleString()\n        }\n        socket.emit(\"sendChat\", chat)\n\n    }\n\n    function handleSongLoad() {\n        setLoaded(true);\n    }\n\n    function handleSongEnd() {\n        setIsPlaying(false);\n        setLoaded(false);\n    }\n\n    function handleSongPlay() {\n        setInteracted(true);\n        setIsPlaying(true);\n    }\n\n    function handleDivClick() {\n        if (!interacted && loaded) {\n            playerRef.current?.play();\n        }\n        setInteracted(true);\n    }\n\n    function handleChatClick() {\n        if (name !== \"\") {\n            setIsChatModalOpen(true);\n            setIsNameModalOpen(false);\n        } else {\n            setIsNameModalOpen(true);\n            setIsChatModalOpen(false);\n        }\n    }\n\n    return (\n        <div\n            onClick={handleDivClick}\n            className=\"d-flex min-vh-100 align-items-center justify-content-center\"\n        >\n            <Modal show={isNameModalOpen} centered onHide={() => setIsNameModalOpen(false)}>\n                <Modal.Header>Enter Name to Chat</Modal.Header>\n                <Modal.Body>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Control placeholder=\"Name\" value={name} onChange={e => setName(e.target.value)}/>\n                    </Form.Group>\n                    <Form.Group className=\"mt-3\">\n                        <Button onClick={handleChatClick} type=\"submit\">Chat</Button>\n                    </Form.Group>\n\n                </Modal.Body>\n            </Modal>\n            <Modal show={isChatModalOpen} centered onHide={() => setIsChatModalOpen(false)}>\n                <Modal.Header>Messages</Modal.Header>\n                <Modal.Body>\n                    <ChatBox name={name} chats={chats} sendMessage={sendMessage}/>\n                </Modal.Body>\n            </Modal>\n            {currSong && (\n                <ReactHowler\n                    src={currSong.song.url}\n                    ref={playerRef}\n                    playing={isPlaying}\n                    onLoad={handleSongLoad}\n                    onPlay={handleSongPlay}\n                    onEnd={handleSongEnd}\n                />\n            )}\n            <div className=\"centre-card\">\n                <div className=\"h3\">\n                    Abhinay's LoFi Radio\n                </div>\n                {isPlaying && interacted && (\n                    <div className=\"\">\n                        Currently Playing : {currSong?.song.name}\n                    </div>\n                )}\n                {loaded && !interacted && (\n                    <div className=\"\">\n                        Click anywhere to start the playback!\n                    </div>\n                )}\n                {currentState === \"W\" && interacted &&\n                <div className=\"\">\n                    Waiting for the next song\n                </div>\n                }\n                {!loaded &&\n                <div className=\"spinner-border text-light m-3\" role=\"status\"/>\n                }\n                <hr/>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                    {chats.length > 0 &&\n                    <div>{chats[chats.length - 1].sender} says <i>{chats[chats.length - 1].message.slice(0, 20)}{chats[chats.length - 1].message.length > 20 && \"...\"}</i>\n                    </div>}\n                    <img alt=\"chat\" className=\"ms-2 poh\" onClick={handleChatClick}\n                         src=\"https://img.icons8.com/material-outlined/24/000000/chat--v1.png\"/>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Player from \"./pages/player\";\nfunction App() {\n    return (\n        <div className=\"App \">\n            <div className=\"container\">\n                <Player />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min';\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}