{"version":3,"sources":["pages/player.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Player","useState","currSong","setCurrSong","isPlaying","setIsPlaying","loaded","setLoaded","currentState","setCurrentState","interacted","setInteracted","playerRef","useRef","socket","io","useEffect","askSongInterval","on","setInterval","emit","currentlyPlaying","state","nextPlaying","currSongArg","currentSong","seek","Date","getTime","start","Math","abs","current","sync","song","id","clearInterval","off","onClick","play","className","src","url","ref","playing","onLoad","onPlay","onEnd","name","duration","role","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAOe,SAASA,IACpB,MAAgCC,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAqCN,mBAAsB,KAA3D,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAiCR,oBAAS,GAA1C,mBAAOS,EAAP,KAAkBC,EAAlB,KACMC,EAAiBC,iBAAO,MACxBC,EAAOC,aAAG,+BA8DhB,OA5DAC,qBAAU,WAYN,IAAIC,EAqBJ,OApBAH,EAAOI,GAAG,WAAU,WAChBD,EAAgBE,aAAY,WACxBL,EAAOM,KAAK,aA1BZ,KA4BJN,EAAOI,GAAG,eAAc,SAACG,EAAuCC,EAAkBC,GAGnE,MAARD,GAAaD,IACZlB,EAAYkB,GApBxB,SAAcG,GAA+B,IAAD,EACxC,GAAItB,EAAJ,CACA,IAAIuB,EAAYvB,EACbsB,IAAaC,EAAYD,GAC5B,IAEa,EAFPE,IAAM,IAAIC,MAAOC,UAAUH,EAAYI,OAAO,IACvCC,KAAKC,IAAIL,GAAI,UAACd,EAAUoB,eAAX,aAAC,EAAmBN,SACpC,IACN,UAAAd,EAAUoB,eAAV,SAAmBN,KAAKA,KAcpBO,CAAKZ,GACLhB,GAAa,IAEdkB,IACKnB,IAAmB,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUgC,KAAKC,MAAKZ,EAAYW,KAAKC,IAChDhC,EAAYoB,IAGpBd,EAAgBa,SAGjB,WACAL,GAAiBmB,cAAcnB,GAClCH,EAAOuB,IAAI,WACXvB,EAAOuB,IAAI,kBAEjB,CAACnC,EAASE,IAuBR,sBACIkC,QATR,WACgC,IAAD,GAAtB5B,GAAcJ,IACf,UAAAM,EAAUoB,eAAV,SAAmBO,QAEvB5B,GAAc,IAMV6B,UAAU,8DAFd,UAIKtC,GACG,cAAC,IAAD,CACIuC,IAAKvC,EAASgC,KAAKQ,IACnBC,IAAK/B,EACLgC,QAASxC,EACTyC,OA9BhB,WACItC,GAAU,IA8BEuC,OAvBhB,WACInC,GAAc,GACdN,GAAa,IAsBD0C,MA7BhB,WACI1C,GAAa,GACbE,GAAU,MA8BN,sBAAKiC,UAAU,cAAf,UACI,qBAAKA,UAAU,KAAf,kCAGCpC,GAAWM,GACR,sBAAK8B,UAAU,GAAf,wCACyBtC,QADzB,IACyBA,OADzB,EACyBA,EAAUgC,KAAKc,KADxC,sBAC0D9C,QAD1D,IAC0DA,OAD1D,EAC0DA,EAAUgC,KAAKe,YAG5E3C,IAAWI,GACR,qBAAK8B,UAAU,GAAf,mDAIY,MAAfhC,GAAoBE,GACjB,qBAAK8B,UAAU,GAAf,wCAIFlC,GACE,qBAAKkC,UAAU,4BAA4BU,KAAK,iBCpGrDC,MARf,WACI,OACI,qBAAKX,UAAU,MAAf,SACI,cAACxC,EAAD,OCQGoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.c23a6e7c.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport ReactHowler from \"react-howler\";\nimport {io} from 'socket.io-client';\nimport CurrentlyPlaying from \"../interfaces/currentlyPlaying\";\n\nconst SYNC_RATE=2000;\n\nexport default function Player() {\n    const [currSong, setCurrSong] = useState<CurrentlyPlaying>();\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n    const [currentState,setCurrentState]=useState<\"X\"|\"W\"|\"P\">(\"X\");\n    const [interacted,setInteracted]=useState(false);\n    const playerRef: any = useRef(null);\n    const socket=io(\"http://gabriel.sed.lol:3001\");\n\n    useEffect(()=>{\n        function sync(currSongArg?:CurrentlyPlaying){\n            if(!currSong)return;\n            let currentSong=currSong;\n            if(currSongArg) currentSong=currSongArg;\n            const seek=(new Date().getTime()-currentSong.start)/1000;\n            const offset=Math.abs(seek-playerRef.current?.seek());\n            if(offset>1) {\n                playerRef.current?.seek(seek);\n            }\n        }\n\n        let askSongInterval:any;\n        socket.on(\"connect\",()=>{\n            askSongInterval=setInterval(()=>{\n                socket.emit(\"askSong\")\n            },SYNC_RATE)\n            socket.on(\"receiveSong\",(currentlyPlaying:CurrentlyPlaying|null,state:\"W\"|\"P\"|\"X\",nextPlaying:CurrentlyPlaying|null)=>{\n\n\n                if(state===\"P\"&&currentlyPlaying) {\n                    setCurrSong(currentlyPlaying);\n                    sync(currentlyPlaying)\n                    setIsPlaying(true);\n                }\n                if(nextPlaying){\n                    if(!isPlaying&&currSong?.song.id!==nextPlaying.song.id) {\n                        setCurrSong(nextPlaying);\n                    }\n                }\n                setCurrentState(state);\n            })\n        })\n        return ()=>{\n            if(askSongInterval) clearInterval(askSongInterval)\n            socket.off(\"connect\")\n            socket.off(\"receiveSong\");\n        }\n    },[currSong,isPlaying])\n\n    function handleSongLoad(){\n        setLoaded(true);\n    }\n    function handleSongEnd(){\n        setIsPlaying(false);\n        setLoaded(false);\n    }\n\n    function handleSongPlay(){\n        setInteracted(true);\n        setIsPlaying(true);\n    }\n\n    function handleDivClick(){\n        if (!interacted && loaded) {\n            playerRef.current?.play();\n        }\n        setInteracted(true);\n    }\n\n    return (\n        <div\n            onClick={handleDivClick}\n            className=\"d-flex min-vh-100 align-items-center justify-content-center\"\n        >\n            {currSong && (\n                <ReactHowler\n                    src={currSong.song.url}\n                    ref={playerRef}\n                    playing={isPlaying}\n                    onLoad={handleSongLoad}\n                    onPlay={handleSongPlay}\n                    onEnd={handleSongEnd}\n                />\n            )}\n            <div className=\"centre-card\">\n                <div className=\"h3\">\n                    Abhinay's LoFi Radio\n                </div>\n                {isPlaying&&interacted && (\n                    <div className=\"\">\n                        Currently Playing : {currSong?.song.name} Duration - {currSong?.song.duration}\n                    </div>\n                )}\n                {loaded && !interacted && (\n                    <div className=\"\">\n                        Click anywhere to start the playback!\n                    </div>\n                )}\n                {currentState===\"W\"&&interacted&&\n                    <div className=\"\">\n                        Waiting for the next song\n                    </div>\n                }\n                {!loaded &&\n                    <div className=\"spinner-border text-light\" role=\"status\"/>\n                }\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Player from \"./pages/player\";\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Player />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}