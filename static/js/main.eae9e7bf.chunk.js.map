{"version":3,"sources":["firebase/fire.ts","firebase/firestore.ts","pages/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fire","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getQueue","a","firestore","collection","doc","get","exists","docData","data","queue","Home","useState","setQueue","currSong","setCurrSong","isPlaying","setIsPlaying","loaded","setLoaded","playerRef","useRef","localQueue","getSyncedSeek","totalTime","reduce","acc","curr","duration","remainder","Date","getTime","i","length","sync","correctSong","seek","console","log","current","useEffect","updateQueue","coolinterval","setInterval","offset","name","clearInterval","onClick","play","className","src","url","ref","playing","onLoad","onEnd","onPlay","role","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eae9e7bf.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDLw8GW7n6Esn_4OtxpfDppC_8c-lqdpwc\",\n    authDomain: \"radio-22579.firebaseapp.com\",\n    projectId: \"radio-22579\",\n    storageBucket: \"radio-22579.appspot.com\",\n    messagingSenderId: \"1041676080851\",\n    appId: \"1:1041676080851:web:bd213bf260fb60b923e626\"\n  };\n\nconst fire=firebase.initializeApp(firebaseConfig);\nexport default fire;","import 'firebase/firestore';\nimport Song from '../interfaces/song';\nimport fire from './fire';\nexport async function getQueue():Promise<Song[]>{\n    const doc=await fire.firestore().collection('queue').doc('queue').get()\n    if(doc&&doc.exists){\n        const docData:any=doc.data();\n        return docData.queue as Song[];\n    }\n    return [];\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactHowler from \"react-howler\";\nimport { getQueue } from \"../firebase/firestore\";\nimport Song from \"../interfaces/song\";\nexport default function Home() {\n    const [queue, setQueue] = useState<Song[]>([]);\n    const [currSong, setCurrSong] = useState<Song>();\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n    const playerRef: any = useRef(null);\n\n    async function updateQueue() {\n        const localQueue = await getQueue();\n        setQueue(localQueue);\n    }\n\n    function getSyncedSeek(localQueue: Song[]): [Song, number] {\n        const totalTime = localQueue.reduce(\n            (acc, curr) => acc + curr.duration,\n            0\n        );\n        const beforeTime = new Date().getTime() / 1000;\n        let remainder = beforeTime % totalTime;\n        for (let i = 0; i < localQueue.length; i++) {\n            if (remainder >= localQueue[i].duration) {\n                remainder -= localQueue[i].duration;\n            } else {\n                return [localQueue[i], remainder];\n            }\n        }\n        return [localQueue[0], 0];\n    }\n\n    function sync(localQueue: Song[]) {\n        const [correctSong, seek] = getSyncedSeek(localQueue);\n        console.log(seek);\n        if (correctSong) if (currSong !== correctSong) setCurrSong(correctSong);\n        if (correctSong) playerRef.current?.seek(seek);\n    }\n    useEffect(() => {\n        updateQueue();\n    }, []);\n    useEffect(() => {\n        const coolinterval = setInterval(() => {\n            if (queue.length > 0) {\n                const [correctSong, seek] = getSyncedSeek(queue);\n                if (playerRef.current) {\n                    const offset = playerRef.current.seek() - seek;\n                    if (correctSong && currSong) {\n                        if (currSong.name !== correctSong.name || offset > 2)\n                            sync(queue);\n                    } else sync(queue);\n                } else sync(queue);\n            }\n        }, 500);\n        return () => {\n            clearInterval(coolinterval);\n        };\n    }, [queue, currSong]);\n    function handleSongPlay() {\n        setIsPlaying(true);\n        sync(queue);\n    }\n    return (\n        <div\n            onClick={() => {\n                if (!isPlaying && loaded) {\n                    playerRef.current?.play();\n                }\n            }}\n            className=\"d-flex min-vh-100 align-items-center justify-content-center\"\n        >\n            {currSong && (\n                <ReactHowler\n                    src={currSong.url}\n                    ref={playerRef}\n                    playing={true}\n                    onLoad={() => {\n                        setLoaded(true);\n                        playerRef.current?.play();\n                    }}\n                    onEnd={() => setLoaded(false)}\n                    onPlay={handleSongPlay}\n                />\n            )}\n            <div className=\"centre-card\">\n                <div className=\"h3\">Abhinay's LoFi Radio</div>\n                {isPlaying && (\n                    <div className=\"\">Currently Playing : {currSong?.name}</div>\n                )}\n                {!isPlaying && loaded && (\n                    <div className=\"\">\n                        Click anywhere to start the playback!\n                    </div>\n                )}\n                {!loaded && (\n                    <div className=\"spinner-border text-light\" role=\"status\">\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/home\";\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Home />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}